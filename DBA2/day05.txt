#!/bin/bash

相关概念

  分库分表
      什么是分库分表
	– 通过某种特定条件,将存放在一个数据库(主机)中的数据,分散存放到多个数据库(主机)中。
	– 已达到分散单台设备负载的效果,即分库分表
	– 数据的切分根据其切分规则的类型,分为2中切分模式
	– 垂直分割(纵向) 和 水平分割(横向)


  垂直分割(纵向切分)
	– 把单一的表,拆分成多个表,并分散到不同的数据库(主机)上
	– 一个数据库由多个表构成,每个表对应不同的业务,可以按照业务对表进行分类,
	  将其分布到不同的数据库(主机)上,实现专库专用,让不同的库(主机)分担不同的业务。
     
  水平分割(横向切分)
	– 按照表中某个字段的某种规则,把向表中写入的记录分散到多个库(主机)中。
	– 简单来说,就是按照数据行切分,将表中的某些行存储到指定的数据库 (主机) 中。

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

mycat软件介绍
  软件介绍
      基于Java的分布式数据库系统中间层,为高并发下的分布式提供解决方案
	– 支持JDBC形式连接
	– 支持MySQL、Oracle、Sqlserver、Mongodb等
	– 提供数据读写分离服务
	– 可以实现数据库服务器的高可用
	– 提供数据分片服务
	– 基于阿里巴巴Cobar进行研发的开源软件
	– 适合数据大量写入数据的存储需求

  分片算法
      mycat服务提供10种分片算法。
	– 1  枚举法 		sharding-by-intfile
	– 2  固定分片hash算法 	rule1
	– 3  范围约定 		auto-sharding-long
	– 4  求模法 		mod-log
	– 5  日期列分区法 	sharding-by-date
	– 6  通配取模 		sharding-by-pattern
	– 7  ASCII码求模通配 	sharding-by-prefixpattern
	– 8  编程指定 		sharding-by-substring
	– 9  字符串拆分hash解析 sharding-by-stringhash
	– 10 一致性hash 	sharding-by-murmur

  工作过程
      当Mycat收到一个SQL时
	– 会先解析这个SQL查找涉及到的表,然后看此表的定义
	– 如果有分片规则,则获取到SQL里分片字段的值,并匹配分片函数,得到该QL对应的分片列表
	– 然后将SQL发往这些分片去执行,最后收集和处理所有分片返回的结果数据,并输出到客户端
-------------------------------------------------------------------------------------------------------------------
以select * from Orders where prov=?语句为例,查到prov=wuhan,按
照分片函数,wuhan返回dn1,于是SQL就发给了MySQL1,去取DB1
上的查询结果,并返回给用户。
如果上述SQL改为elect * from Orders where prov in (‘wuhan’,‘beijing’),
那么,SQL就会发给MySQL1与MySQL2去执行,然后结果集合并后输出
给用户。但通常业务中我们的SQL会有Order By 以及Limit翻页语法,
此时就涉及到结果集在Mycat端的二次处理。
-------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

配置mycat
  装包
      安装依赖包
[ root@db50 ~]# rpm -qa | grep -i jdk 	#安装系统自带的即可
java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64
java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64

      安装mycat服务软件包
[ root@db50 ~]# tar -zxf Mycat-server-1.4-beta-
20150604171601-linux.tar.gz 			#免安装,解压后即可使用
[ root@db50 ~]# mv mycat/ /usr/local/
[ root@db50 ~]# ls /usr/local/mycat/
bin catlet conf lib logs version.txt

  修改配置文件
      目录结构说明
	– bin			#mycat命令 如 启动 停止 等
	– catlet 		#扩展功能
	– conf 			#配置文件
	– lib 			#mycat使用的jar包 mycat是java开发的
	– log 			#mycat启动日志和运行日志
	– wrapper.log 		#mycat服务启动日志 ,启动有问题可以看这个日志的内容
	– mycat.log 		#记录sql脚本执行后的具体报错内容

      重要配置文件说明
	– server.xml 		#设置连接mycat服务的账号 、密码等
	– schema.xml		#配置mycat使用的真实数据库和表
	– rule.xml 		#定义mycat分片规则

      配置标签说明
	– <user>.. ..</user>		#定义连mycat用户信息
	– <datanode>.. ..</datanode>	#指定数据节点
	– <datahost>.. ..</datahost>	#指定数据库地址及用户信息
	– <!--	...	-->		#注释

      修改配置文件
[root@db50 mycat]# cp conf/server.xml{,.bak}
[ root@db50 ~]# vim /usr/local/mycat/conf/server.xml
 33         </system>
 34         <user name="test">						#连接mycat的用户名
 35                 <property name="password">123456</property>		#对应密码
 36                 <property name="schemas">TESTDB</property>		#虚拟库
 37         </user>
 38 
 39         <user name="user">
 40                 <property name="password">123456</property>
 41                 <property name="schemas">TESTDB</property>
 42                 <property name="readOnly">true</property>		#定义只读
 43         </user>

[root@db50 mycat]# cp conf/schema.xml{,.bak}
[ root@db50 ~]# vim /usr/local/mycat/conf/schema.xml
... ...
  3 <mycat:schema xmlns:mycat="http://org.opencloudb/">
  5         <schema name="TESTDB" checkSQLschema="false" sqlMaxLimit="100">
  7                 <table name="travelrecord(表名)" dataNode="dn1,dn2,dn3(后台数据库)" rule="auto-sharding-long(分片规则)" />
 11                 <table name="company" primaryKey="ID" type="global" dataNode="dn1,dn2,dn3" />
 12                 <table name="goods" primaryKey="ID" type="global" dataNode="dn1,dn2" />
 15                 <table name="hotnews" primaryKey="ID" dataNode="dn1,dn2,dn3"
 16                         rule="mod-long" />
 20                 <table name="employee" primaryKey="ID" dataNode="dn1,dn2"
 21                         rule="sharding-by-intfile" />
 22                 <table name="customer" primaryKey="ID" dataNode="dn1,dn2"
 23                         rule="sharding-by-intfile">
 24                         <childTable name="orders" primaryKey="ID" joinKey="customer_id"
 25                                 parentKey="id">
 26                                 <childTable name="order_items" joinKey="order_id"
 27                                         parentKey="id" />
 28                         </childTable>
 29                         <childTable name="customer_addr" primaryKey="ID" joinKey="customer_id"
 30                                 parentKey="id" />
 31                 </table>
 34         </schema>
 37         <dataNode name="dn1" dataHost="localhost1" database="db1" />		#指定数据节点
 38         <dataNode name="dn2(分片名)" dataHost="localhost2(数据主机)" database="db2(分片主机的库名)" />
 43         <dataHost name="localhost1" maxCon="1000" minCon="10" balance="0"
 44                 writeType="0" dbType="mysql" dbDriver="native" switchType="1"  slaveThreshold="100">
 45                 <heartbeat>select user()</heartbeat>
 47                 <writeHost host="hostM1" url="192.168.4.54:3306(指定localhost1的数据库主机IP)" user="root"
 48                         password="123456">
 51                 </writeHost>
 52                 <writeHost host="hostS1" url="localhost:3316" user="root"
 53                         password="123456" />		#读写分离项，本实验不用，注释掉
 55         </dataHost>						#指定服务器IP地址的及用户信息
... ...
 85 </mycat:schema>
----------------------------------------------------------------------------------------------------------------
      修改数据库服务器配置文件  在对应的数据库上建库和用户授权
	– 添加对应设置后重启mysqld服务
	– 添加授权用户
	– 创建存储数据对应的库db1 、 db2

]# mysql -uroot -p123456		
mysql> grant all on *.* to root@'%' identified by "123456";	#db54,db55上都授权
mysql> create database db1;		#db54上创建
mysql> create database db2;		#db55上创建
]# vim /etc/my.cnf
[mysqld]
... ...
lower_case_table_names = 1		#表名忽略大小写

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

启动服务
	– 指定java路径、添加PATH路径、启动服务

[root@db50 mycat]# /usr/local/mycat/bin/mycat status
Mycat-server is not running.
[root@db50 mycat]# /usr/local/mycat/bin/mycat start
Starting Mycat-server...
[root@db50 mycat]# ss -antupl | grep :8066
tcp    LISTEN     0   100    :::8066   :::*  users:(("java",pid=5135,fd=49))



[root@db51 ~]# mysql -utest -p123456 -h192.168.4.50 -P8066
mysql> show databases;
mysql> use TESTDB
mysql> show tables;
+------------------+
| Tables in TESTDB |
+------------------+
| company          |
| customer         |
| customer_addr    |
| employee         |
| goods            |
| hotnews          |
| orders           |
| order_items      |
| travelrecord     |
+------------------+
mysql> create table employee(		#按配置文件规则创建employee表
    -> sharding_id int(2),
    -> name char(10),
    -> age tinyint(2));
mysql> desc employee;
+-------------+------------+------+-----+---------+-------+
| Field       | Type       | Null | Key | Default | Extra |
+-------------+------------+------+-----+---------+-------+
| sharding_id | int(2)     | YES  |     | NULL    |       |
| name        | char(10)   | YES  |     | NULL    |       |
| age         | tinyint(2) | YES  |     | NULL    |       |
+-------------+------------+------+-----+---------+-------+
mysql> insert into employee(sharding_id,name,age)  values(10000,"tom",18),(10010,"bob",20),(10000,"lily",16),(10010,"lucy",17);
mysql> select * from employee;
+-------------+------+------+
| sharding_id | name | age  |
+-------------+------+------+
|       10000 | tom  |   18 |
|       10000 | lily |   16 |
|       10010 | bob  |   20 |
|       10010 | lucy |   17 |
+-------------+------+------+

[root@db54 ~]# mysql -uroot -p123456
mysql> select * from db1.employee;
+-------------+------+------+
| sharding_id | name | age  |
+-------------+------+------+
|       10000 | tom  |   18 |
|       10000 | lily |   16 |
+-------------+------+------+

[root@db55 ~]# mysql -uroot -p123456
mysql> select * from db2.employee;
+-------------+------+------+
| sharding_id | name | age  |
+-------------+------+------+
|       10010 | bob  |   20 |
|       10010 | lucy |   17 |
+-------------+------+------+


